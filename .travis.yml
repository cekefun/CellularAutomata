# This .travis.yml is based on LOOT's .travis.yml and JuliaGPU's .travis.yml:
# https://github.com/loot/loot/blob/dev/.travis.yml
# https://github.com/JuliaGPU/OpenCL.jl/blob/783774e452b71a0eb6a4d26c3208dd2f0a564083/.travis.yml

language: c++
dist: trusty
sudo: enabled

matrix:
  include:
  - os: linux
    compiler: gcc
    env:  CONFIG_IDENTIFIER='linux-gcc' CC_COMPILER_NAME='gcc' CXX_COMPILER_NAME='g++'
    addons:
      apt:
        packages:
        - gcc
        - g++

  - os: linux
    compiler: clang
    env: CONFIG_IDENTIFIER='linux-clang-tbb' CC_COMPILER_NAME='clang' CXX_COMPILER_NAME='clang++'
    addons:
      apt:
        packages:
        - clang
        - clang++
        - libstdc++-dev
        - libtbb-dev

  - os: osx
    osx_image: xcode8.3
    compiler: clang
    env: CONFIG_IDENTIFIER='osx-clang' CC_COMPILER_NAME='clang' CXX_COMPILER_NAME='clang++'

before_install:
  # If we're working with an OS X machine, then want to install homebrew packages (the APT packages
  # will be ignored)
  - if [ $TRAVIS_OS_NAME == "osx" ]; then brew update; brew install mono; brew install gcc; brew install mpich; brew install homebrew/science/hdf5; fi
  - export CXX="$CXX_COMPILER_NAME" CC="$CC_COMPILER_NAME"
  # Print the C++ compiler version.
  - $CXX --version
  # Grab a relatively recent version of CMake, unzip it and add
  # it to the path.
  - if [ $TRAVIS_OS_NAME != "osx" ]; then wget https://cmake.org/files/v3.12/cmake-3.12.0-Linux-x86_64.tar.gz; tar -xzf cmake-3.12.0-Linux-x86_64.tar.gz; export PATH="$PWD/cmake-3.12.0-Linux-x86_64/bin/:$PATH"; fi
  # Print the CMake version.
  - cmake --version

  - if [ $TRAVIS_OS_NAME = "linux" ]; then
      URL="http://developer.amd.com/tools-and-sdks/opencl-zone/opencl-tools-sdks/amd-accelerated-parallel-processing-app-sdk/"
      URLDOWN="http://developer.amd.com/amd-license-agreement-appsdk/"

      NONCE1_STRING='name="amd_developer_central_downloads_page_nonce"'
      FILE_STRING='name="f"'
      POSTID_STRING='name="post_id"'
      NONCE2_STRING='name="amd_developer_central_nonce"'

      #For newest FORM=`wget -qO - $URL | sed -n '/download-2/,/64-bit/p'`
      FORM=`wget -qO - $URL | sed -n '/download-5/,/64-bit/p'`

      # Get nonce from form
      NONCE1=`echo $FORM | awk -F ${NONCE1_STRING} '{print $2}'`
      NONCE1=`echo $NONCE1 | awk -F'"' '{print $2}'`
      echo $NONCE1

      # get the postid
      POSTID=`echo $FORM | awk -F ${POSTID_STRING} '{print $2}'`
      POSTID=`echo $POSTID | awk -F'"' '{print $2}'`
      echo $POSTID

      # get file name
      FILE=`echo $FORM | awk -F ${FILE_STRING} '{print $2}'`
      FILE=`echo $FILE | awk -F'"' '{print $2}'`
      echo $FILE

      FORM=`wget -qO - $URLDOWN --post-data "amd_developer_central_downloads_page_nonce=${NONCE1}&f=${FILE}&post_id=${POSTID}"`

      NONCE2=`echo $FORM | awk -F ${NONCE2_STRING} '{print $2}'`
      NONCE2=`echo $NONCE2 | awk -F'"' '{print $2}'`
      echo $NONCE2
  
      wget --content-disposition --trust-server-names $URLDOWN --post-data "amd_developer_central_nonce=${NONCE2}&f=${FILE}" -O AMD-SDK.tar.bz2;
      tar -xjf AMD-SDK.tar.bz2;
      AMDAPPSDK=${HOME}/AMDAPPSDK;
      export OPENCL_VENDOR_PATH=${AMDAPPSDK}/etc/OpenCL/vendors;
      mkdir -p ${OPENCL_VENDOR_PATH};
      sh AMD-APP-SDK*.sh --tar -xf -C ${AMDAPPSDK};
      echo libamdocl64.so > ${OPENCL_VENDOR_PATH}/amdocl64.icd;
      export LD_LIBRARY_PATH=${AMDAPPSDK}/lib/x86_64:${LD_LIBRARY_PATH};
      chmod +x ${AMDAPPSDK}/bin/x86_64/clinfo;
      ${AMDAPPSDK}/bin/x86_64/clinfo;
    fi;


script:
  - cmake CMakeLists.txt
  - make install

